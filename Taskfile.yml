version: '3'

vars:
  TERRAFORM_DIR: terraform
  PACKER_DIR: packer
  JOBS_DIR: nomad-jobs
  SCRIPTS_DIR: scripts

env:
  TF_IN_AUTOMATION: "true"

tasks:
  default:
    desc: "üöÄ Main Commands"
    silent: true
    cmds:
      - echo "üöÄ HashiStack Deployment Tasks"
      - echo "=============================="
      - echo ""
      - echo "üèóÔ∏è  Infrastructure:"
      - echo "   task provision    - Deploy all infrastructure"
      - echo "   task destroy      - Destroy everything"
      - echo ""
      - echo "üìä Applications:"
      - echo "   task observability - Deploy monitoring (Grafana, Prometheus)"
      - echo "   task apps          - Deploy applications (Terramino, etc)"
      - echo ""
      - echo "üñºÔ∏è  Images:"
      - echo "   task build-server  - Build server image with Packer"
      - echo "   task build-client  - Build client image with Packer"
      - echo ""
      - echo "‚ÑπÔ∏è  Info:"
      - echo "   task tokens        - Get access tokens"
      - echo "   task status        - Check system status"
      - echo "   task urls          - Get all URLs"

  # Main Infrastructure Commands
  provision:
    desc: "üèóÔ∏è Deploy all infrastructure (servers, clients, networking)"
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - echo "üèóÔ∏è Provisioning HashiStack infrastructure..."
      - terraform init
      - terraform plan
      - terraform apply
      - echo ""
      - echo "‚úÖ Infrastructure provisioned!"
      - echo "üìã Run 'task tokens' to get access credentials"

  destroy:
    desc: "üí• Destroy all infrastructure"
    dir: "{{.TERRAFORM_DIR}}"
    prompt: "Are you sure you want to destroy ALL infrastructure?"
    cmds:
      - echo "üí• Destroying all infrastructure..."
      - terraform destroy
      - echo "‚úÖ Everything destroyed!"

  # Application Deployment
  observability:
    desc: "üìä Deploy monitoring stack (Grafana, Prometheus, Traefik)"
    cmds:
      - echo "üìä Deploying observability stack..."
      - task: _wait-nomad
      - echo "   üöõ Deploying Traefik (Load Balancer)..."
      - nomad job run {{.JOBS_DIR}}/core/traefik.nomad.hcl
      - echo "   üìà Deploying Prometheus (Metrics)..."
      - nomad job run {{.JOBS_DIR}}/core/prometheus.nomad.hcl
      - echo "   üìä Deploying Grafana (Dashboards)..."
      - nomad job run {{.JOBS_DIR}}/core/grafana.nomad.hcl
      - echo ""
      - echo "‚úÖ Observability stack deployed!"
      - echo "üåê Access Grafana at http://server-ip:3000 (admin/admin)"

  apps:
    desc: "üéÆ Deploy applications (Terramino demo game)"
    cmds:
      - echo "üéÆ Deploying applications..."
      - task: _wait-nomad
      - echo "   üéØ Deploying Terramino game..."
      - nomad job run {{.JOBS_DIR}}/applications/terramino.nomad.hcl
      - echo ""
      - echo "‚úÖ Applications deployed!"
      - echo "üéÆ Play Terramino at the load balancer URL"

  # Image Building
  build-server:
    desc: "üñºÔ∏è Build HashiStack server image with Packer"
    dir: "{{.PACKER_DIR}}/builds"
    cmds:
      - echo "üñºÔ∏è Building HashiStack server image..."
      - packer validate -var-file=../variables/common.pkrvars.hcl hashistack-server.pkr.hcl
      - packer build -var-file=../variables/common.pkrvars.hcl hashistack-server.pkr.hcl
      - echo "‚úÖ Server image built and published to HCP Packer!"

  build-client:
    desc: "üñºÔ∏è Build HashiStack client image with Packer"
    dir: "{{.PACKER_DIR}}/builds"
    cmds:
      - echo "üñºÔ∏è Building HashiStack client image..."
      - packer validate -var-file=../variables/common.pkrvars.hcl hashistack-client.pkr.hcl
      - packer build -var-file=../variables/common.pkrvars.hcl hashistack-client.pkr.hcl
      - echo "‚úÖ Client image built and published to HCP Packer!"

  # Info Commands
  tokens:
    desc: "üîë Get all authentication tokens"
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - echo "üîë Authentication Tokens"
      - echo "========================"
      - echo ""
      - echo "Consul Master Token:"
      - terraform output -raw consul_master_token
      - echo ""
      - echo "Nomad Server Token:"
      - terraform output -raw nomad_server_token
      - echo ""
      - echo "üíª Quick Setup Commands:"
      - echo "export CONSUL_HTTP_ADDR=$(terraform output -json consul_ui_urls | jq -r '.[0]')"
      - echo "export CONSUL_HTTP_TOKEN=$(terraform output -raw consul_master_token)"
      - echo "export NOMAD_ADDR=$(terraform output -json nomad_ui_urls | jq -r '.[0]')"
      - echo "export NOMAD_TOKEN=$(terraform output -raw nomad_server_token)"

  urls:
    desc: "üåê Get all access URLs"
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - echo "üåê Access URLs"
      - echo "=============="
      - echo ""
      - echo "Consul UI:"
      - terraform output consul_ui_urls
      - echo ""
      - echo "Nomad UI:"
      - terraform output nomad_ui_urls
      - echo ""
      - echo "Applications:"
      - terraform output application_urls

  status:
    desc: "üìä Check system status"
    cmds:
      - echo "üìä System Status"
      - echo "================"
      - echo ""
      - echo "Nomad Jobs:"
      - nomad job status || echo "‚ùå Nomad not accessible (run 'task tokens' to get connection info)"
      - echo ""
      - echo "Consul Members:"
      - consul members || echo "‚ùå Consul not accessible (run 'task tokens' to get connection info)"

  # Internal helper tasks (hidden from main list)
  _wait-nomad:
    internal: true
    cmds:
      - |
        echo "‚è≥ Waiting for Nomad to be ready..."
        max_attempts=30
        attempt=0
        while [ $attempt -lt $max_attempts ]; do
          if nomad server members >/dev/null 2>&1; then
            echo "‚úÖ Nomad is ready"
            exit 0
          fi
          echo "   Waiting... (attempt $((attempt + 1))/$max_attempts)"
          sleep 10
          attempt=$((attempt + 1))
        done
        echo "‚ùå Nomad failed to become ready"
        echo "üí° Make sure to set environment variables: task tokens"
        exit 1

  _setup-env:
    internal: true
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - |
        export CONSUL_HTTP_ADDR=$(terraform output -json consul_ui_urls | jq -r '.[0]')
        export CONSUL_HTTP_TOKEN=$(terraform output -raw consul_master_token)
        export NOMAD_ADDR=$(terraform output -json nomad_ui_urls | jq -r '.[0]')
        export NOMAD_TOKEN=$(terraform output -raw nomad_server_token)